= javascript_tag("dashboard.js")
.dashboard.clearfix
  %h3
    = t('Dashboard')
    %span.beacon
      %span.ring
      %span.dot
  .interval-slider
    %span.interval-slider-label
      = t('PollingInterval')
      \:
    %span.current-interval 2 sec
    %br/
    %input{:max => "20000", :min => "2000", :step => "1000", :type => "range", :value => "2000"}/
.row.chart
  #realtime{"data-failed-label" => "#{t('Failed')}", "data-processed-label" => "#{t('Processed')}"}
  #realtime-legend
.row.chart
  %h5
    %span.history-heading= t('History')
    %a{:class => "history-graph #{"active" if params[:days] == "7"}", :href => "#{root_path}?days=7"}= t('OneWeek')
    %a{:class => "history-graph #{"active" if params[:days].nil? || params[:days] == "30"}", :href => root_path}= t('OneMonth')
    %a{:class => "history-graph #{"active" if params[:days] == "90"}", :href => "#{root_path}?days=90"}= t('ThreeMonths')
    %a{:class => "history-graph #{"active" if params[:days] == "180"}", :href => "#{root_path}?days=180"}= t('SixMonths')
  #history{"data-failed" => "#{h Sidekiq.dump_json(failed_history)}", "data-failed-label" => "#{t('Failed')}", "data-processed" => "#{h Sidekiq.dump_json(processed_history)}", "data-processed-label" => "#{t('Processed')}", "data-update-url" => "#{root_path}stats"}
  #history-legend
%br/
%h5 Redis
.redis-wrapper
  .stats-container
    - if redis_info.fetch("redis_version", nil)
      .stat
        %h3.redis_version= redis_info.fetch("redis_version")
        %p= t('Version')
    - if redis_info.fetch("uptime_in_days", nil)
      .stat
        %h3.uptime_in_days= redis_info.fetch("uptime_in_days")
        %p= t('Uptime')
    - if redis_info.fetch("connected_clients", nil)
      .stat
        %h3.connected_clients= redis_info.fetch("connected_clients")
        %p= t('Connections')
    - if redis_info.fetch("used_memory_human", nil)
      .stat
        %h3.used_memory_human= redis_info.fetch("used_memory_human")
        %p= t('MemoryUsage')
    - if redis_info.fetch("used_memory_peak_human", nil)
      .stat
        %h3.used_memory_peak_human= redis_info.fetch("used_memory_peak_human")
        %p= t('PeakMemoryUsage')
